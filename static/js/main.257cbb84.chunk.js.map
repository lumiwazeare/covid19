{"version":3,"sources":["SharedGraph.js","SharedTable.js","AffectedView.js","Home.js","PageHeader.js","FetchData.js","App.js","index.js"],"names":["SharedGraph","sideBarOpen","graph","Plot","createPlotlyComponent","Plotly","useEffect","Plots","resize","divId","data","x","y","type","marker","color","layout","autosize","title","useResizeHandler","className","style","width","SharedTable","columns","column","pagination","fixedHeader","AffectedView","countryData","useState","country","setCountry","daily","setDaily","monthly","setMonthly","yearly","setYearly","name","tempDaily","tempMonthly","tempYearly","currentDate","Date","infected","forEach","value","tempDate","date","getTime","newCasesBySpecimenDate","getMonth","fontSize","Home","firstDaily","firstTotal","secondDaily","secondTotal","totalDose","setTotalDose","doseGraph","setDoseGraph","selector","row","areaCode","newPeopleVaccinatedFirstDoseByPublishDate","newPeopleVaccinatedSecondDoseByPublishDate","cumPeopleVaccinatedFirstDoseByPublishDate","cumPeopleVaccinatedSecondDoseByPublishDate","doseTable","setDoseTable","selectedDose","setSelectedDose","tempFirstDaily","tempFirstTotal","tempSecondDaily","tempSecondTotal","tempDose","tempDoseTable","dose1","index","push","id","dose2","onChange","e","target","PageHeader","onCountryChange","currentCountry","countries","href","disabled","map","v","useFetch","url","setData","abort","AbortController","fetch","signal","then","res","json","catch","App","setCountryData","length","result","filter","d","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.257cbb84.chunk.js","sourcesContent":["import Plotly from \"plotly.js-basic-dist-min\";\nimport { useEffect } from \"react\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\n\nconst SharedGraph = ({sideBarOpen, graph}) => {\n    const Plot = createPlotlyComponent(Plotly);\n\n    useEffect(() => {\n        Plotly.Plots.resize(\"plotlyChart\");\n         }, [sideBarOpen]);\n       \n           return (\n             <Plot\n               divId=\"plotlyChart\"\n               data={[\n                 {\n                   x: graph.x,\n                   y: graph.y,\n                   type: 'scatter',\n                   marker: {color: 'red'},\n                 },\n               ]}\n               layout={{autosize: true, title: ''}}\n               useResizeHandler={sideBarOpen}\n               className=\"me-auto h-full\"\n               style={{width:\"92%\",}}\n             />\n           );\n}\n\nexport default SharedGraph;","import DataTable from 'react-data-table-component';\n\nconst SharedTable = ({data}) => {\n\n    return (\n        <DataTable\n            columns={data.column}\n            data={data.data}\n            pagination\n            fixedHeader\n        />\n    );\n}\n \nexport default SharedTable;","\n\nimport { useState, useEffect } from \"react\";\n\nconst AffectedView = ({ countryData }) => {\n    const [country, setCountry] = useState(\"Loading....\");\n    const [daily, setDaily] = useState(0);\n    const [monthly, setMonthly] = useState(0);\n    const [yearly, setYearly] = useState(0);\n\n    useEffect(() => {\n        if (countryData) {\n            setCountry(countryData.name);\n\n            let tempDaily = 0;\n            let tempMonthly = 0;\n            let tempYearly = 0;\n\n            const currentDate = new Date();\n\n            countryData.infected.data.forEach((value) => {\n                \n                //calculate for daily date\n                let tempDate = new Date(value.date);\n\n                let tempTime = tempDate.getTime();\n                //daily\n                if(tempTime === currentDate.getTime())\n                {\n                    tempDaily += value.newCasesBySpecimenDate;\n                }\n\n                //monthly\n                if((currentDate.getMonth() + 1) === (tempDate.getMonth() + 1))\n                {\n                    tempMonthly += value.newCasesBySpecimenDate;\n                }\n\n                //yearly\n                tempYearly += value.newCasesBySpecimenDate;\n            });\n\n\n            setDaily(tempDaily);\n            setMonthly(tempMonthly);\n            setYearly(tempYearly);\n\n        }\n    }, [countryData]);\n\n\n    return (\n        <section className=\"p-2\">\n            <div className=\"card\">\n                <div className=\"card-body\">\n                    <h3><blockquote>People tested positive In {country}</blockquote></h3>\n                </div>\n            </div>\n\n\n            <div className=\"row p-3\">\n                <div className=\"col-12\">\n                    <div className=\"card bg-light\">\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <p>\n                                        Tested Positive <br />\n                                        <b style={{ fontSize: \"19px\" }}>Duration</b>\n                                    </p>\n                                </div>\n\n                                <div className=\"col mt-3\">\n                                    <b>Daily</b> <br />\n                                    <h3>{daily}</h3>\n                                </div>\n\n                                <div className=\"col mt-3\">\n                                <b>This Month</b> <br />\n                                    <h3>{monthly}</h3>\n                                </div>\n\n                                <div className=\"col mt-3\">\n                                <b>This Year</b> <br />\n                                    <h3>{yearly}</h3>\n                                </div>\n\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </section>\n    );\n}\n\nexport default AffectedView;","import SharedGraph from \"./SharedGraph\";\nimport SharedTable from \"./SharedTable\";\nimport AffectedView from \"./AffectedView\";\n\nimport { useState, useEffect } from \"react\";\n\nconst Home = ({ countryData }) => {\n    const [country, setCountry] = useState(\"Loading....\");\n    const [totalDose, setTotalDose] = useState({\n        firstDaily: 0,\n        firstTotal: 0,\n        secondDaily: 0,\n        secondTotal: 0\n    });\n\n    const [doseGraph, setDoseGraph] = useState({\n        x:[0],\n        y:[0]\n    });\n\n    const [doseTable, setDoseTable] = useState({\n        column:[\n            {\n                name: 'Date',\n                selector: row => row.date,\n            },\n            {\n                name: 'State Code',\n                selector: row => row.areaCode,\n            },\n            {\n                name: 'Daily Vaccinated',\n                selector: row => (row.newPeopleVaccinatedFirstDoseByPublishDate) ? row.newPeopleVaccinatedFirstDoseByPublishDate : row.newPeopleVaccinatedSecondDoseByPublishDate,\n            },\n            {\n                name: 'Total Vaccinated',\n                selector: row => (row.cumPeopleVaccinatedFirstDoseByPublishDate) ? row.cumPeopleVaccinatedFirstDoseByPublishDate : row.cumPeopleVaccinatedSecondDoseByPublishDate,\n            },\n        ],\n        data:[]\n    });\n\n    const [selectedDose, setSelectedDose] = useState(\"firstDose\");\n\n    useEffect(()=>\n    {\n      if(countryData)\n      {\n          setCountry(countryData.name);\n\n          let tempFirstDaily = 0;\n          let tempFirstTotal = 0;\n\n          let tempSecondDaily = 0;\n          let tempSecondTotal = 0;\n\n          //temp variable for the current dosage\n          let tempDose = {\n              x:[],\n              y:[]\n          };\n\n          let tempDoseTable = {\n            column:doseTable.column,\n            data:[]\n        };\n        \n\n          countryData.dose1.forEach((value,index) => {\n            tempFirstDaily += value.newPeopleVaccinatedFirstDoseByPublishDate ? value.newPeopleVaccinatedFirstDoseByPublishDate : 0;\n            tempFirstTotal += value.cumPeopleVaccinatedFirstDoseByPublishDate ? value.cumPeopleVaccinatedFirstDoseByPublishDate : 0;\n\n            if(selectedDose === \"firstDose\")\n            {\n                tempDose.x.push(value.date);\n                tempDose.y.push(value.newPeopleVaccinatedFirstDoseByPublishDate);\n\n                tempDoseTable.data.push({...value,id:index + 1});\n            }\n          \n        });\n\n\n        countryData.dose2.forEach((value,index) => {\n            tempSecondDaily += value.newPeopleVaccinatedSecondDoseByPublishDate ? value.newPeopleVaccinatedSecondDoseByPublishDate : 0;\n            tempSecondTotal += value.cumPeopleVaccinatedSecondDoseByPublishDate ? value.cumPeopleVaccinatedSecondDoseByPublishDate : 0;\n\n            if(selectedDose === \"secondDose\")\n            {\n                tempDose.x.push(value.date);\n                tempDose.y.push(value.newPeopleVaccinatedSecondDoseByPublishDate);\n                tempDoseTable.data.push({...value,id:index + 1});\n            }\n          \n        });\n\n\n          setTotalDose(\n            {\n                firstDaily: tempFirstDaily,\n                firstTotal: tempFirstTotal,\n                secondDaily: tempSecondDaily,\n                secondTotal: tempSecondTotal\n            }\n          );\n\n          setDoseGraph(tempDose);\n          setDoseTable(tempDoseTable);\n      }\n    },[countryData]);\n\n    const onDoseChange = (e) => {\n        setSelectedDose(e.target.value);\n\n        if(countryData)\n        {\n            //temp variable for the current dosage\n          let tempDose = {\n            x:[],\n            y:[]\n        };\n\n        let tempDoseTable = {\n            column:doseTable.column,\n            data:[]\n        };\n      \n\n        countryData.dose1.forEach((value,index) => {\n          if(e.target.value === \"firstDose\")\n          {\n              tempDose.x.push(value.date);\n              tempDose.y.push(value.newPeopleVaccinatedFirstDoseByPublishDate);\n              tempDoseTable.data.push({...value,id:index + 1});\n          }\n        \n      });\n\n\n      countryData.dose2.forEach((value,index) => {\n        \n          if(e.target.value === \"secondDose\")\n          {\n              tempDose.x.push(value.date);\n              tempDose.y.push(value.newPeopleVaccinatedSecondDoseByPublishDate);\n              tempDoseTable.data.push({...value,id:index + 1});\n          }\n        \n      });\n\n\n        setDoseGraph(tempDose);\n        setDoseTable(tempDoseTable);\n        }\n    };\n\n    return (\n        <div>\n        <section className=\"p-2\">\n            <div className=\"card\">\n                <div className=\"card-body\">\n                    <h3><blockquote>COVID-19 CORONAVIRUS TRACKER FOR {country}</blockquote></h3>\n                </div>\n            </div>\n\n            <p className=\"pt-2\">\n                Official page for data and insights on coronavirus (COVID-19).\n            </p>\n\n            <div className=\"row p-3\">\n                <div className=\"col-12\">\n                    <div className=\"card bg-light\">\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <p>\n                                        Vaccinations <br />\n                                        <b style={{ fontSize: \"19px\" }}>People vaccinated</b>\n                                    </p>\n                                </div>\n\n                                <div className=\"col mt-3\">\n                                    Daily -- 1st dose <br />\n                                    <h3>{totalDose.firstDaily}</h3>\n                                </div>\n\n                                <div className=\"col mt-3\">\n                                    Daily -- 2nd dose <br />\n                                    <h3>{totalDose.secondDaily}</h3>\n                                </div>\n                            </div>\n\n                            <div className=\"row mt-5 align-items-end\">\n\n                                <div className=\"col mt-3 offset-md-4\">\n                                    Total -- 1st dose <br />\n                                    <h3>{totalDose.firstTotal}</h3>\n                                </div>\n\n                                <div className=\"col mt-3\">\n                                    Total -- 2nd dose <br />\n                                    <h3>{totalDose.secondTotal}</h3>\n                                </div>\n                            </div>\n\n                            <div className=\"row pt-5\">\n                                <div className=\"col-8\">\n                                    <div>\n                                        <h6>Statistics For A Period Of One Year</h6>\n                                    </div>\n                                    <div className=\"form-floating\">\n                                        <select data-testid=\"dose-change\" onChange={onDoseChange} value={selectedDose} className=\"form-select\">\n                                            <option value=\"firstDose\">First Dose</option>\n                                            <option value=\"secondDose\">Second Dose</option>\n                                        </select>\n                                        <label>Select Dose</label>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"row pt-5\">\n                            <SharedGraph sideBarOpen={true} graph={doseGraph}/>\n                            \n                            </div>\n\n                            <div className=\"row pt-5\">\n                                <div className=\"col\">\n                                    <SharedTable data={doseTable}/>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </section>\n\n        <AffectedView countryData={countryData}/>\n\n        </div>\n    );\n}\n\nexport default Home;","\n\nconst PageHeader = ({onCountryChange, currentCountry, countries}) => {\n    return ( \n        <nav className=\"navbar fixed-top navbar-expand-sm navbar-dark bg-dark\">\n            <div className=\"container\">\n            <span className=\"navbar-brand\" href=\"\">Covid19 Tracker</span>\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#mycollapse\">\n                <span className=\"navbar-toggler-icon\"></span> </button>\n            \n                <div className=\"collapse navbar-collapse\" id=\"mycollapse\">\n                    <ul className=\"navbar-nav me-auto\">\n                    <li className=\"nav-item\">\n                        <span className=\"nav-link\">Country <span className=\"bi bi-pin-map\"></span> : <b>{currentCountry}</b></span>\n                    </li>\n                    </ul>\n\n                    <form className=\"d-flex\">\n                        <div className=\"input-group\">\n                            <span className=\"input-group-text\">Change</span>\n                            <select onChange={onCountryChange} value={currentCountry} name=\"\" id=\"\" className=\"from-control-select\">\n                            <option disabled>Please select a country</option>\n\n                            {\n                                countries && countries.map(v => (<option key={v.id} value={v.name}>{v.name}</option>))\n                            }\n                            </select>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        \n    </nav>\n    );\n}\n \nexport default PageHeader;","import { useEffect, useState } from \"react\";\n\nconst useFetch = (url) => {\n\n    const [data, setData] = useState(null)\n\n    useEffect(()=> {\n        const abort = new AbortController();\n        fetch(url,{\n            signal:abort.signal,\n        })\n        .then(res => {\n            return res.json()}\n            )\n        .then(res => {\n            setData(res.countries)\n        })\n        .catch(e => {\n            //console.log(JSON.stringify(e.name));\n        });\n\n        return () => {abort.abort()};\n    },[url])\n    return { data };\n}\n \nexport default useFetch;","//import logo from './logo.svg';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { useState , useEffect} from 'react';\nimport  Home from './Home';\nimport PageHeader from './PageHeader';\nimport useFetch from './FetchData';\n\nfunction App() {\n\n  const {data:countries} = useFetch(\"data/data.json\");\n  const [countryData, setCountryData] = useState(null);\n  const [country, setCountry] = useState(\"Loading....\")\n\n  const onCountryChange = (e) => {\n    setCountry(e.target.value);\n\n    if(countries)\n    {\n      const result = countries.filter(d => { return d.name === e.target.value});\n      setCountryData(result[0]);\n    }\n  }\n\n  useEffect(()=>\n    {\n      if(countries && countries.length > 0)\n      {\n        setCountry(countries[0].name);\n        //pick the default nigeria\n          setCountryData(countries[0]);\n      }\n    },[countries])\n\n\n  return (\n      <Router>\n        <PageHeader onCountryChange={onCountryChange} currentCountry={country} countries={countries}/>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home countryData={countryData} />\n          </Route>\n\n        </Switch>\n      </Router>\n    \n      \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport App from './App';\nimport './index.css';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}